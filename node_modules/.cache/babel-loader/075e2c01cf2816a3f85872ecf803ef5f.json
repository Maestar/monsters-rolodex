{"ast":null,"code":"import _classCallCheck from\"/Users/terabenoit/monsters-rolodex/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/terabenoit/monsters-rolodex/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/terabenoit/monsters-rolodex/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/terabenoit/monsters-rolodex/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/terabenoit/monsters-rolodex/monsters-rolodex/node_modules/@babel/runtime/helpers/esm/inherits\";//React note: If something doesn't require the state or lifecycle methods, it should probably be a component.\nimport React,{Component}from'react';import'./App.css';import{CardList}from'./components/card-list/card-list-component';import{SearchBox}from'./components/search-box/search-box.component';var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this));_this.handleChange=function(e){//the arrow function allows us to bind the this context to the app\n// thats because arrow functions have lexical scoping: their context is where they are created not whats inside them.\n_this.setState({searchField:e.target.value});};_this.state={monsters:[],searchField:''};//alternative to arrow function in handleChange\n//this.handleChange = this.handleChange.bind(this);\nreturn _this;}// componentDidMount: when component is loaded, do thing.\n_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;fetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(users){return _this2.setState({monsters:users});});}},{key:\"render\",value:function render(){var _this$state=this.state,monsters=_this$state.monsters,searchField=_this$state.searchField;//equivalent to const monsters = this.state.monsters; ect.\nvar filteredMonsters=monsters.filter(function(monster){return monster.name.toLowerCase().includes(searchField.toLowerCase());});return React.createElement(\"div\",{className:\"App\"},React.createElement(\"h1\",null,\"Monsters Rolodex\"),React.createElement(SearchBox//placeholder and handleChange are 'props' and their contents are passed down to the search component\n,{placeholder:\"search Monsters\",handleChange:this.handleChange}),React.createElement(CardList,{monsters:filteredMonsters}));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/terabenoit/monsters-rolodex/monsters-rolodex/src/App.js"],"names":["React","Component","CardList","SearchBox","App","handleChange","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","filteredMonsters","filter","monster","name","toLowerCase","includes"],"mappings":"4qBAAA;AACA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAO,WAAP,CAGA,OAAQC,QAAR,KAAuB,4CAAvB,CACA,OAAQC,SAAR,KAAwB,8CAAxB,C,GAEMC,CAAAA,G,6DAEJ,cAAa,qCACX,uEADW,MAoBbC,YApBa,CAoBE,SAACC,CAAD,CAAO,CACpB;AACA;AACA,MAAKC,QAAL,CAAc,CAAEC,WAAW,CAAEF,CAAC,CAACG,MAAF,CAASC,KAAxB,CAAd,EAED,CAzBY,CAGX,MAAKC,KAAL,CAAa,CACXC,QAAQ,CAAE,EADC,CAEXJ,WAAW,CAAE,EAFF,CAAb,CAKA;AACA;AATW,aAUZ,CACH;6EACqB,iBAEjBK,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACM,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADd,EAECF,IAFD,CAEM,SAAAG,KAAK,QAAI,CAAA,MAAI,CAACV,QAAL,CAAc,CAACK,QAAQ,CAAEK,KAAX,CAAd,CAAJ,EAFX,EAID,C,uCASO,iBAE4B,KAAKN,KAFjC,CAEEC,QAFF,aAEEA,QAFF,CAEYJ,WAFZ,aAEYA,WAFZ,CAEwC;AAE9C,GAAMU,CAAAA,gBAAgB,CAAGN,QAAQ,CAACO,MAAT,CAAgB,SAAAC,OAAO,QAC5CA,CAAAA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCf,WAAW,CAACc,WAAZ,EAApC,CAD4C,EAAvB,CAAzB,CAKA,MACE,4BAAK,SAAS,CAAC,KAAf,EACE,iDADF,CAEE,oBAAC,SACD;AADA,EAEE,WAAW,CAAC,iBAFd,CAGE,YAAY,CAAE,KAAKjB,YAHrB,EAFF,CAME,oBAAC,QAAD,EAAU,QAAQ,CAAIa,gBAAtB,EANF,CADF,CAUD,C,iBAhDejB,S,EAmDlB,cAAeG,CAAAA,GAAf","sourcesContent":["//React note: If something doesn't require the state or lifecycle methods, it should probably be a component.\nimport React, { Component } from 'react';\nimport './App.css';\n\n\nimport {CardList} from './components/card-list/card-list-component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n\n    //alternative to arrow function in handleChange\n    //this.handleChange = this.handleChange.bind(this);\n  }\n// componentDidMount: when component is loaded, do thing.\n  componentDidMount(){\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n\n  }\n\n  handleChange = (e) => {\n    //the arrow function allows us to bind the this context to the app\n    // thats because arrow functions have lexical scoping: their context is where they are created not whats inside them.\n    this.setState({ searchField: e.target.value})\n\n  }\n\n  render(){\n\n    const { monsters, searchField } = this.state; //equivalent to const monsters = this.state.monsters; ect.\n\n    const filteredMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n        )\n      \n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n        //placeholder and handleChange are 'props' and their contents are passed down to the search component\n          placeholder='search Monsters' \n          handleChange={this.handleChange} />\n        <CardList monsters = {filteredMonsters} /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}